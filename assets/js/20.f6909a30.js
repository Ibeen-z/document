(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{439:function(v,t,a){"use strict";a.r(t);var s=a(2),e=Object(s.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[v._v("#")]),v._v(" 简介")]),v._v(" "),t("p",[v._v("将其包裹的动态组件缓存起来，避免在组件切换时重复创建和销毁，从而提高性能。")]),v._v(" "),t("h2",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[v._v("#")]),v._v(" 原理")]),v._v(" "),t("p",[v._v("当用 keep-alive 包裹一个动态组件时，它会将该组件的状态和实例缓存起来，而不是直接销毁它。这意味着组件的 mounted 和 destroyed 钩子函数只会执行一次，而不是每次切换都会执行。当再次切换到该组件时，它会从缓存中取出之前的状态和实例，重新挂载到 DOM 上，但不会重新创建。")]),v._v(" "),t("p",[v._v("这个特性在某些场景下非常有用，比如在路由切换或者动态组件频繁变换的情况下，可以避免不必要的性能开销，提高应用的响应速度。")]),v._v(" "),t("h2",{attrs:{id:"和v-if、v-show区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和v-if、v-show区别"}},[v._v("#")]),v._v(" 和v-if、v-show区别")]),v._v(" "),t("h3",{attrs:{id:"v-show"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v-show"}},[v._v("#")]),v._v(" v-show")]),v._v(" "),t("p",[t("code",[v._v("v-show")]),v._v("根据条件控制元素的显示与隐藏。当条件为真时，元素会被设置为 "),t("code",[v._v("display: block")]),v._v("，而当条件为假时，元素会被设置为 "),t("code",[v._v("display: none")]),v._v("。它不会销毁元素，只是通过 CSS 来控制显示与隐藏。因此，元素的状态和数据都会保留，只是不再显示在页面上。")]),v._v(" "),t("h3",{attrs:{id:"v-if"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v-if"}},[v._v("#")]),v._v(" v-if")]),v._v(" "),t("p",[t("code",[v._v("v-if")]),v._v(" 根据条件来切换元素的存在与否。当条件为真时，元素会被创建并插入到 DOM 中，当条件为假时，元素会被从 DOM 中移除并销毁。因此，每次切换条件时，元素的状态和数据都会重新初始化。")]),v._v(" "),t("h3",{attrs:{id:"区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[v._v("#")]),v._v(" 区别")]),v._v(" "),t("p",[t("code",[v._v("keep-alive")]),v._v(" 在性能优化方面与 "),t("code",[v._v("v-show")]),v._v(" 和 "),t("code",[v._v("v-if")]),v._v(" 有明显的不同。"),t("code",[v._v("keep-alive")]),v._v(" 通过缓存组件的实例来避免重复的创建和销毁，适用于需要频繁切换的场景。而 "),t("code",[v._v("v-show")]),v._v(" 和 "),t("code",[v._v("v-if")]),v._v(" 则是通过 CSS 控制元素的显示与隐藏，以及动态创建和销毁元素来实现条件切换。在使用时，根据实际场景和需求选择合适的指令或组件来优化应用的性能。")])])}),[],!1,null,null,null);t.default=e.exports}}]);